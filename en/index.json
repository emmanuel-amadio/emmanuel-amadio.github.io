[{"content":"As a convinced user of FastAPI I will explore in a new serie of articles how to setup a backend service with 2 databases using async interfaces:\nSQL: PostgreSQL + SQLAlchemy (async). NoSQL: MongoDB + Beanie (async) N.B. I know there are existing solutions which are readily available from the FastAPI website, the point here is to propose something new with a twist, call it geek.\nSetting up the root folder We will use docker-compose to run the databases in containers.\nTo make sure we are able to start and stop the services we need to provide a place where to store data. We could either use docker volumes or map local folders in the containers, we are going to use the later.\nI came up with this files and folders structure:\n./ ├── backend | └── ├── db-sql | └── ├── db-nosql | └── ├── conf.env ├── docker-compose.yml └── README.md In more details:\nroot folder README.md\nThis file will contain the informations needed to delpoy this project. conf.env\nThis file has all environnment variables used in the project. docker-compose.yml\nThis docker-compose file used to run all the differents services. db-sql\nDirectory containing data for sql database. db-nosql\nDirectory containing data for no-sql database. backend\nDirectory which contains everything related to the fastapi backend service itself. Content of the backend folder Before checking what we will have in the folder, we need to know what we need:\nSQL database migration will be handled by alembic. Testing of our Python code, we\u0026rsquo;ll use Pytest. To create our container we need a Dockerfile. As we need to share code between the tests and the app, we use a multi stage build with different targets, this makes things easier. To make sure our Python -code and libraries- doesn\u0026rsquo;t collide with the container system, we\u0026rsquo;ll use virtualenv and pip for dependencies. The files and folders are then:\nbackend ├── alembic ├── app ├── scripts ├── tests ├── alembic.ini ├── app.Dockerfile ├── pytest.ini └── requirements.txt backend service rootfolder alembic\nThis folders has the alembic configuration with migration files. app\nDirectory containing all the code for the web service application. scripts\nDirectory containing the scripts used for starting either: The application. The tests. tests\nDirectory containing all pytest files. alembic.ini\nThe configuration file for alembic. app.Dockerfile\nThe docker configuration file for building both the application and the test images using a multi stage build. pytest.ini\nThe configuration file for pytest. requirements.txt\nThe almighty requirements file for installing all modules with pip. Create a docker-compose file\nNow in the root directory, let\u0026rsquo;s start with a minimal docker-compose file. We\u0026rsquo;ll update as we build up our service.\nversion: \u0026#39;3.9\u0026#39; services: fastapi-base-pgdb: image: \u0026#34;postgres:12-alpine\u0026#34; env_file: - conf.env volumes: - ./db-sql/:/var/lib/postgresql/data/ ports: - \u0026#34;5432:5432\u0026#34; networks: - fastapi-base-network fastapi-base-pgadmin: image: dpage/pgadmin4:latest env_file: - conf.env ports: - \u0026#34;5050:80\u0026#34; depends_on: - fastapi-base-pgdb networks: - fastapi-base-network fastapi-base-backend: container_name: base-app image: base-backend-image env_file: - conf.env build: context: backend dockerfile: app.Dockerfile target: application ports: - \u0026#34;8000:8000\u0026#34; networks: - fastapi-base-network volumes: - ./app:/opt/app - ./dataset:/opt/dataset depends_on: - fastapi-base-pgdb fastapi-base-testing: container_name: base-test image: base-testing-image env_file: - conf.env build: context: backend dockerfile: app.Dockerfile target: testing networks: - fastapi-base-network volumes: - ./tests_results:/tests_results depends_on: - fastapi-base-pgdb networks: fastapi-base-network: driver: bridge ./ ├── db-sql ├── db-nosql ├── backend │ ├── alembic | ├── app | ├── scripts | ├── tests | ├── alembic.ini | ├── pytest.ini | ├── app.Dockerfile | ├── pytest.ini | └── requirements.txt ├── README.md ├── config.env └── docker-compose.yml ","permalink":"https://emmanuel-io.github.io/en/posts/fastapi-base-2/","summary":"As a convinced user of FastAPI I will explore in a new serie of articles how to setup a backend service with 2 databases using async interfaces:\nSQL: PostgreSQL + SQLAlchemy (async). NoSQL: MongoDB + Beanie (async) N.B. I know there are existing solutions which are readily available from the FastAPI website, the point here is to propose something new with a twist, call it geek.\nSetting up the root folder We will use docker-compose to run the databases in containers.","title":"How to set up a fastapi backend service project"},{"content":"My career is shifting, and I\u0026rsquo;m steering it towards web development, mostly backend. Coming from digital electronics \u0026amp; embedded systems, I have a broad view on the digital ecosystem and I need a space where to show case my work and ideas. Having a github account is nice, but I wanted a place where I could publish articles online. It can be of any form like tutorial, blogs, reviews, editorials and much more. Having my own blog provide the chance to add one more aspect of social presence. This blog website will as well be my portfolio.\nWhat were the options for blogging There are some free options, a couple of them are:\nWordPress Medium Ghost Wix These paid or partially free platforms provide a end to end solution to setup a website. They provides many benefits like :\nFocus mainly on content. Formatting is configured on the platform SEO (Search Engine Optimization) to promote the article in google search Easy interface to write article in browser itself And many more like support for images, videos and plugin extensions Abstract database, themeing, hosting and updates management As the title of the suggest, I wanted to create blog for free and github allow you to have hosting for free. The only catch here is that you can only have static content, no server, no database allowed.\nWhy Hugo? From the github pages constraints came an idea I wanted to try since a while: using a static site generator. While github pages provides a convenient way to use Jekyll, a slow but proven solution, I wanted to try Hugo as it is fast and could use the github actions pipeline to do automatic site generation and it is written in the Go language which I wanted to have a taste of.\nQuoting from the official website:\nHugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\nHugo can be used for complete Content Management where content can be provided in many ways. It has lot of feature for customization,content organizing and important to me, multilingual support out of the box.\nWhile geeky and loving to play with tech stacks, I needed a straightforward solution with great potential for evolution. So that I can save myself from the hassle of managing UX, Styling, Hosting, Database and other elements of website management. With Hugo, I just write the content at correct location and there it is!!.\nNow the process Ok.. Lets do that\nI went through these 5 steps to setup this blog based on Bhanu Chaddha\u0026rsquo;s article:\nInstall Hugo Create Project Write Your Blog Set up git repositories Push your content and Done!! Everything which follow is based on my own exeperience using Ubuntu 22.04, adapt it to your own needs using the setup instructions!\n1. Install Hugo Installing Hugo on ubuntu is a breeze, just open a console and run:\nsnap install hugo --channel=extended After set up is completed. You can check if Hugo is installed correctly using below command. It should print current installed versions of Hugo:\nhugo version For me the returned string looked like this:\nhugo v0.96.0-2fd4a7d3d6845e75f8b8ae3a2a7bd91438967bbb+extended linux/amd64 BuildDate=2022-03-26T09:15:58Z VendorInfo=mage Lets move on to next step.\n2. Create Project Then I went to folder where I created this hugo project:\ncd ~/Documents Now it\u0026rsquo;s time to create the project:\nhugo new site emmanuel-io-github-io-hugo You would see below result. Basic hugo project is ready now.\nCongratulations! Your new Hugo site is created in /home/emmanuel/Documents/emmanuel-io-github-io-hugo. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. Hugo is a very flexible static site generator. So flexible that it doesn\u0026rsquo;t impose a look and feel for your website. You could create everything from scratch by hand but there is a better way (they thought about it), use an existing Hugo\u0026rsquo;s themes. You can always customize it later if you want.\nFor this blog I used the ananke theme.\nWhile I could have installed the theme directly in the project tree, it\u0026rsquo;s nicer to use it as a git submodule as I now I want to integrate everything in the github action pipeline. Furthermore this makes upgrades and git actions cleaner.\nInstalling theme here is not same as installing Hugo. We would just map theme as sub-module in our git project. By doing this we would not clone the theme in the project but just add the reference of casper-two theme. Hugo will automatically use the theme while generating the static content. For the context of this blog you dont need to know about the git sub-modules. You can just follow the commands as specified. If you wish to read about git sub-modules, you can read about it here\nGit repository creation Type below commands to initialize the project as a git repository.\n# Move into the project directory cd emmanuel-io-github-io-hugo # Initialize git repository git init hint: Using \u0026#39;master\u0026#39; as the name for the initial branch. This default branch name hint: is subject to change. To configure the initial branch name to use in all hint: of your new repositories, which will suppress this warning, call: hint: hint: git config --global init.defaultBranch \u0026lt;name\u0026gt; hint: hint: Names commonly chosen instead of \u0026#39;master\u0026#39; are \u0026#39;main\u0026#39;, \u0026#39;trunk\u0026#39; and hint: \u0026#39;development\u0026#39;. The just-created branch can be renamed via this command: hint: hint: git branch -m \u0026lt;name\u0026gt; Initialized empty Git repository in /home/emmanuel/Documents/emmanuel-io-github-io-hugo/.git/ Type below command if like me your default branch is still master and not main.\n# Change branch to main git branch -m main Theme Installation Type below command to install the theme.\n# Adding theme as sub-module git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke You will see below output\nCloning into \u0026#39;/home/emmanuel/Documents/emmanuel-io-github-io-hugo/themes/ananke\u0026#39;... remote: Enumerating objects: 2529, done. remote: Counting objects: 100% (552/552), done. remote: Compressing objects: 100% (308/308), done. remote: Total 2529 (delta 279), reused 431 (delta 210), pack-reused 1977 Receiving objects: 100% (2529/2529), 4.46 MiB | 2.05 MiB/s, done. Resolving deltas: 100% (1375/1375), done. Adding Configuration and content To have a website running, I first copied the exemple from the theme inside the current project using the command below:\ncp -R ./themes/ananke/exampleSite/{config.toml,content*,static*} ./ Test it on local Finally I launched hugo web server using the below command:\nhugo server This will start a local server at http://localhost:1313. Right now this shows the theme demo website\n3. Create my own site This part is out of the scope of this article, basically I created this new article and adjusted the configuration to fit my needs\n","permalink":"https://emmanuel-io.github.io/en/posts/set-hugo-1/","summary":"My career is shifting, and I\u0026rsquo;m steering it towards web development, mostly backend. Coming from digital electronics \u0026amp; embedded systems, I have a broad view on the digital ecosystem and I need a space where to show case my work and ideas. Having a github account is nice, but I wanted a place where I could publish articles online. It can be of any form like tutorial, blogs, reviews, editorials and much more.","title":"How to set up this website using Hugo part 1"},{"content":"In part 1 we explored how I created a website using Hugo, now we are going to create a github action to automatically deploy the site on github pages when we create a commit.\nSet up of Git repositories I created 2 GitHub repositories for the project:\nFirst Repository for the hugo project emmanuel-io.github.io.hugo Second repository to host my blog as Github User page emmanuel-io.github.io You can find on a lot of articles who are using 2 differents branches of the same repository (\u0026ldquo;main\u0026rdquo; for the project, \u0026ldquo;gh_pages\u0026rdquo; for the generated static files), however I prefere to have two distinct repositories, each one dealing with a different concern.\nNow go to the root of the project and execute below commands.\n# create the .gitignore file touch .gitignore # add the public folder to the list of ignored files echo \u0026#34;public/\u0026#34; \u0026gt;\u0026gt;.gitignore # commit any uncommitted changes git commit -a -m \u0026#34;init\u0026#34; # set remote origin branch git remote add origin https://github.com/emmanuel-io/emmanuel-io.github.io.hugo.git # push changes git push -u origin main I have ignored the public directory as we don\u0026rsquo;t need to handle it in the repository.\nNow we need to generate a pair of public/private keys to be able to use github actions from the 1st directory to write in the 2nd repository. To understand what I did, you can check these links from the GitHub Action used to deploy my hugo website.\nHave a particular look at this part: Create SSH Deploy Key\nDo as stated but NOT IN YOUR PROJECT DIRECTORY !!!\nNow in the root directory I created a github workflow yaml file to make sure that every time I push to remote, my blog is updated by github. In VSCode I created this file in \u0026ldquo;.github/workflows/deploy.yml\u0026rdquo;\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called \u0026#34;deploy\u0026#34; deploy: # The type of runner that the job will run on runs-on: ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 # Github Actions fo Hugo - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true # Creates ./public directory - name: Build run: hugo --minify # Upload/Commit the contents from publish_dir -\u0026gt; external_repository - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # github_token: ${{ secrets.GITHUB_TOKEN }} personal_token: ${{secrets.GH_TOKEN}} publish_dir: ./public external_repository: emmanuel-io/emmanuel-io.github.io publish_branch: main user_name: emadio user_email: emmanuel.amadio@mail.com Push your content Now we have set up our repositories and created our static content in public directory . The only step remain is pushing our local content to GitHub. Lets do that now. Run below commands in the terminal\n# commit any uncommitted changes git commit -a -m \u0026#34;deploy with actions\u0026#34; # push changes git push -u origin main And thats it.\nNow my blog is updated on every push :-)\nYou can match your content and configuration with below repositories. The only difference is the value of baseurl that is because I have set up this demo website as Project Site and not the User Site.\n\u0026ldquo;hugo\u0026rdquo; Project Repository Blog Repository ","permalink":"https://emmanuel-io.github.io/en/posts/set-hugo-2/","summary":"In part 1 we explored how I created a website using Hugo, now we are going to create a github action to automatically deploy the site on github pages when we create a commit.\nSet up of Git repositories I created 2 GitHub repositories for the project:\nFirst Repository for the hugo project emmanuel-io.github.io.hugo Second repository to host my blog as Github User page emmanuel-io.github.io You can find on a lot of articles who are using 2 differents branches of the same repository (\u0026ldquo;main\u0026rdquo; for the project, \u0026ldquo;gh_pages\u0026rdquo; for the generated static files), however I prefere to have two distinct repositories, each one dealing with a different concern.","title":"How to set up this website using Hugo part 2"},{"content":" It started with this, long ago Creative by nature, I enjoy solving problems and developing new digital solutions. An agile developer and facilitator, I have a know-how in C programming and python micro services. I have 20 years of experience in embedded systems product development (hardware - firmware - software). My technical background is mainly linked to microcontrollers - fpgas - electronics.\nI enjoy using english for my work language, being in a multicultural environment and working with people having different technical - soft or hard - skills.\nTo understand more how I work, here are my go-to rules:\n🎯 KISS : Keep It Simple and Stupid.\n🎯 DRY : Don’t Repeat Yourself.\n🎯 Consistency beats intensity : Long term strategy.\n🎯 Explain it : If it can’t be explained, it’s not understood or too complicated.\n🎯 Simplify : If it’s too complicated, break it into smaller pieces.\n🎯 Be like water : Go with the flow.\n🎯 Be open and transparent : Feedback is key for improvement.\n🎯 When it makes sense, break the rules : But do it meaningfully and stay accountable.\nOnly one rule which can’t be broken:\n🎯 Knowledge is multiplied when shared : don’t keep things for yourself.\n","permalink":"https://emmanuel-io.github.io/en/about/","summary":"It started with this, long ago Creative by nature, I enjoy solving problems and developing new digital solutions. An agile developer and facilitator, I have a know-how in C programming and python micro services. I have 20 years of experience in embedded systems product development (hardware - firmware - software). My technical background is mainly linked to microcontrollers - fpgas - electronics.\nI enjoy using english for my work language, being in a multicultural environment and working with people having different technical - soft or hard - skills.","title":"About"}]